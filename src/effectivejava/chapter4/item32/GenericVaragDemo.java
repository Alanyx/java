package effectivejava.chapter4.item32;

/**
 * @author yinxing
 * @date 2019/9/2
 */

public class GenericVaragDemo {

    /**
     * 决定何时使用 @SafeVarargs 注解的规则很简单：
     * 在每种方法上使用 @SafeVarargs，并使用泛型或参数化类型的可变参数，这样用户就不会因不必要的和令人困惑的编译器警告而担忧。
     * 这意味着你不应该写危险或者 toArray 等不安全的可变参数方法。
     * <p>
     * 在下列情况下，泛型可变参数方法是安全的：
     * a.它不会在可变参数数组中存储任何东西
     * b.它不会使数组（或克隆）对不可信代码可见
     */

    /**
     * 请注意，SafeVarargs 注解只对不能被重写的方法是合法的，因为不可能保证每个可能的重写方法都是安全的。
     * 在 Java 8 中，注解仅在静态方法和 final 实例方法上合法; 在 Java 9 中，它在私有实例方法中也变为合法。
     */

    /**
     * 总而言之，可变参数和泛型不能很好地交互，因为可变参数机制是在数组上面构建的脆弱的抽象，并且数组具有与泛型不同的类型规则。 虽然泛型可变参数不是类型安全的，但它们是合法的。 如果选择使用泛型（或参数化）可变参数编写方法，请首先确保该方法是类型安全的，然后使用 @SafeVarargs 注解对其进行标注，以免造成使用不愉快。
     */
}
