package effectivejava.chapter7.item67;

/**
 * @author yinxing
 * @date 2019/9/17
 */

public class OptimizationDemo {

    /**
     * 不要为了性能而牺牲合理的架构。努力编写 好的程序，而不是快速的程序。
     * =====> 当然必须在设计过程中也要考虑性能。
     *
     * 尽量避免限制性能的设计决策。
     *
     * 考虑API设计决策的性能结果。
     *
     * 通常情况下，好的 API 设计与好的性能是一致的。为了获得良好的性能而改变 API 是一个非常糟糕的想法。
     *
     * 在每次尝试优化之前和之后测量性能。
     */

    /**
     * 总之，不要努力写快的程序，要努力写好程序；速度自然会提高。
     * 但是在设计系统时一定要考虑性能，特别是在设计API、线路层协议和持久数据格式时。
     * 当你完成了系统的构建之后，请度量它的性能。如果足够快，就完成了。如果没有，利用分析器找到问题的根源，并对系统的相关部分进行优化。
     * 第一步是检查算法的选择：再多的底层优化也不能弥补算法选择的不足。根据需要重复这个过程，在每次更改之后测量性能，直到你满意为止。
     */

}
