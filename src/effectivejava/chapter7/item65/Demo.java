package effectivejava.chapter7.item65;

/**
 * @author yinxing
 * @date 2019/9/17
 */

public class Demo {


    /**
     * 反射的能力是有代价的：
     * a.失去了编译时类型检查的所有好处， 包括异常检查。
     * b.执行反射访问所需的代码既笨拙又冗长。
     * c.性能降低。 反射方法调用比普通方法调用慢得多。
     */

    /**
     *通过非常有限的形式使用反射，你可以获得反射的许多好处，同时花费的代价很少。
     * 对于许多程序，它们必须用到在编译时无法获取的类，在编译时存在一个适当的接口或超类来引用该类（详见第 64 条）。
     * 如果是这种情况，可以用反射方式创建实例，并通过它们的接口或超类正常地访问它们。
     */

    /**
     * 总之，反射是一种功能强大的工具，对于某些复杂的系统编程任务是必需的，但是它有很多缺点。
     * 如果编写的程序必须在编译时处理未知的类，则应该尽可能只使用反射实例化对象，并使用在编译时已知的接口或超类访问对象。
     */

}
