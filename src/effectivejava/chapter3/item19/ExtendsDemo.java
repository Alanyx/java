package effectivejava.chapter3.item19;

/**
 * 19. 要么设计继承并提供文档说明，要么禁用继承
 * @author yinxing
 * @date 2019/8/23
 */

public class ExtendsDemo {

    /**
     * 首先，这个类必须准确地描述重写这个方法带来的影响。
     *    --> 一个类必须文档说明任何可能调用可重写方法的情况。
     *    @implSpec: 调用可重写方法的方法在文档注释结束时包含对这些调用的描述。这些描述在规范中特定部分，标记为“Implementation Requirements”
     */

    /**
     * 测试为继承而设计的类的唯一方法就是编写子类
     * 因此，在发布它之前，你必须通过编写子类来测试你的类。
     */

    /**
     * 还有一些类必须遵守允许继承的限制。构造方法绝不能直接或间接调用可重写的方法(即非 private 方法)。
     * (见例子: Sub 和 Super)
     */

    /**
     * 在没有想要安全地子类化的设计和文档说明的类中，最好办法是禁止子类化。有两种方法禁止子类化:
     * - a.两者中较容易的是声明类为 final。
     * - b.使所有的构造方法都是私有的或包级私有的，并且添加公共静态工厂来代替构造方法。
     * 这个方案在内部提供了使用子类的灵活性，在条目 17 中讨论过。两种方法都是可以接受的。
     */

    /**
     * 总之，专门为了继承而设计类是一件很辛苦的工作。你必须建立文档说明其所有的自用模式，并且一旦建立了文档，在这个类的整个生命周期中都必须遵守。
     * 如果没有做到，子类就会依赖父类的实现细节，如果父类的实现发生了变化，它就有可能遭到破坏。
     * 为了允许其他人能编写出高效的子类，还你必须导出一个或者多个受保护的方法。
     * 除非知道真正需要子类，否则最好通过将类声明为 final，或者确保没有可访问的构造器来禁止类被继承。
     */
}
